---
# Config backup tasks
- name: Set varibales
  ansible.builtin.set_fact:
    running_config_tmp_file_path: "{{ tmp_root_dir }}/{{ inventory_hostname }}-running-config.cfg"
    ucs_filename: "{{ inventory_hostname }}-ucs-backup.ucs"
    ucs_tmp_file_path: "{{ tmp_root_dir }}/{{ inventory_hostname }}-ucs-backup.ucs"
    inventory_hostname_dir_path: "{{ tmp_root_dir }}/{{ git_repo_name }}/{{ vendor_dir }}/{{ inventory_hostname }}/config-backup"
  delegate_to: localhost
  ignore_errors: true # You want the role to run end to end

- name: Collect f5 running configuration
  f5networks.f5_modules.bigip_command:
    commands:
      - "tmsh show running-config"
    provider: "{{ provider }}"
  delegate_to: localhost
  ignore_errors: true
  register: config_backup

# regex_replace('\r\n', '\n'): Ensures that the configuration is formatted properly with new lines,
# in case the original output contains carriage return and line feed (\r\n).
- name: Ensure the config is properly formatted
  ansible.builtin.set_fact:
    formatted_config: "{{ config_backup.stdout[0] | regex_replace('\r\n', '\n') }}"
  delegate_to: localhost
  ignore_errors: true

- name: Save the configuration to the temporary config store
  ansible.builtin.copy:
    content: "{{ formatted_config }}"
    dest: "{{ running_config_tmp_file_path }}"
  delegate_to: localhost
  ignore_errors: true

# UCS file backup
- name: UCS Backup - Remove older ucs file 
  f5networks.f5_modules.bigip_ucs:
    ucs: "{{ ucs_filename }}"
    state: absent
    provider: "{{ provider }}"
  delegate_to: localhost
  ignore_errors: true

- name: UCS Backup - Create empty fileon controller
  ansible.builtin.file:
    path: "{{ ucs_tmp_file_path }}"
    state: touch
  delegate_to: localhost
  ignore_errors: true

- name: UCS Backup - Download a new UCS 
  f5networks.f5_modules.bigip_ucs_fetch:
    src: "{{ ucs_filename }}"
    dest: "{{ ucs_tmp_file_path }}"
    provider: "{{ provider }}"
    async_timeout: 600
  delegate_to: localhost
  ignore_errors: true

- name: Clean up files  # Ensure no git conflicts
  ansible.builtin.shell: |
    cd {{ tmp_root_dir }}
    rm -rf {{ git_repo_name }}
  run_once: true
  ignore_errors: true
  delegate_to: localhost

# Git tasks
- name: Clone the config backup git repository
  ansible.builtin.git:
    repo: "{{ git_repo_url }}"
    dest: "{{ tmp_root_dir }}/{{ git_repo_name }}"
    version: "{{ git_repo_branch }}"
    force: yes       # Still clone down and overwrite incase local repo is existing.
  ignore_errors: true # You want your role to go upto the end for notifications to be sent
  environment:
    GIT_SSL_NO_VERIFY: "true"
  run_once: true
  delegate_to: localhost
  ignore_errors: true # You want the role to run end to end

# Enable git lfs by default
- name: Enable git lfs by default
  ansible.builtin.shell: |
    cd {{ tmp_root_dir }}/{{ git_repo_name }}
    git lfs track "*.bin"
    git lfs track "*.ucs"
    git lfs track "*.tgz" 
    git lfs pull 
  run_once: true
  ignore_errors: true
  delegate_to: localhost

- name: Ensure inventory_hostname dir is present - create if absent
  ansible.builtin.file:
    path: "{{ inventory_hostname_dir_path }}"
    state: directory
  ignore_errors: true
  delegate_to: localhost

- name: List collected config files
  ansible.builtin.shell: |
    ls -l {{ tmp_root_dir }}
  run_once: true
  delegate_to: localhost
  register: files_collection
  ignore_errors: true # You want the role to run end to end

# - name: Debug output
#   ansible.builtin.debug:
#     var: files_collection.stdout_lines
#   run_once: true
#   delegate_to: localhost

- name: Copy the .cfg file and .ucs file to local git repo
  ansible.builtin.shell: |
    cp {{ running_config_tmp_file_path }} {{ inventory_hostname_dir_path }}
    cp {{ ucs_tmp_file_path }} {{ inventory_hostname_dir_path }}
  ignore_errors: true
  # run_once: true # You want all inventory hostname files copied
  delegate_to: localhost

- name: Commit the changes and push to the remote repository
  ansible.builtin.shell: |
     cd {{ tmp_root_dir }}/{{ git_repo_name }}
     git config --global user.name {{ git_user }}
     git config --global user.email {{ git_user_email }}
     git add .
     git commit -m "file updates on $(date)"
     git push
  run_once: true
  environment:
    GIT_SSL_NO_VERIFY: "true"
  ignore_errors: true # You want your role to go upto the end for notifications to be sent
  delegate_to: localhost

# Might not need this since containers are ephemeral.
# But if testing or end up running the playbook more than once in the same container, this comes in handy
- name: Clean up files
  ansible.builtin.shell: |
    cd {{ tmp_root_dir }}
    rm -rf {{ git_repo_name }}
  run_once: true
  ignore_errors: true
  delegate_to: localhost